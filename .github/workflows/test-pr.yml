name: CI/CD Pipeline - Examples and FOCAS Monitor

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 cmake build-essential
        
    - name: Check environment
      run: |
        cd examples/c
        chmod +x check-environment.sh build-windows.sh
        ./check-environment.sh
        
    - name: Build Windows executable
      run: |
        cd examples/c
        
        # Set build environment variables
        export BUILD_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        export BUILD_VERSION="ci-build-$(date +%Y%m%d)"
        export GITHUB_SHA="${{ github.sha }}"
        
        echo "ðŸ”§ Build Environment:"
        echo "  Timestamp: $BUILD_TIMESTAMP"
        echo "  Version: $BUILD_VERSION"
        echo "  Commit: ${GITHUB_SHA:0:7}"
        
        ./build-windows.sh
        
    - name: Verify build artifacts
      run: |
        cd examples/c
        test -f build-windows/bin/fanuc_example.exe
        echo "âœ… Windows executable built successfully"
        
        # Check file is actually a Windows executable
        file build-windows/bin/fanuc_example.exe | grep -i "PE32"
        echo "âœ… Confirmed Windows PE32 executable"
        
        # Check size (should be around 245KB)
        size=$(stat -c%s build-windows/bin/fanuc_example.exe)
        echo "ðŸ“¦ Executable size: $((size/1024))KB"
        
        # Verify release package was created
        echo "ðŸ“¦ Release package contents:"
        ls -la windows-release/
        
    - name: Build FOCAS Monitor
      run: |
        cd focasmonitor
        echo "ðŸ”§ Building FOCAS Monitor..."
        
        # Check FOCAS Monitor environment
        make check
        
        # Build FOCAS Monitor
        make build-windows
        
        # Create release package
        make package
        
        # Verify FOCAS Monitor build
        test -f build-windows/focasmonitor.exe
        file build-windows/focasmonitor.exe | grep "PE32"
        echo "âœ… FOCAS Monitor built successfully"
        
        # Get executable size
        size=$(stat -c%s build-windows/focasmonitor.exe)
        echo "ðŸ“¦ FOCAS Monitor executable size: $((size/1024))KB"
        
        # Verify release package
        echo "ðŸ“¦ FOCAS Monitor release package contents:"
        ls -la release/
        
    - name: Upload Windows release package
      uses: actions/upload-artifact@v4
      with:
        name: fanuc-windows-release-package
        path: |
          examples/c/windows-release/
        retention-days: 30
        
    - name: Upload FOCAS Monitor release
      uses: actions/upload-artifact@v4
      with:
        name: focasmonitor-release-${{ github.sha }}
        path: |
          focasmonitor/release/
        retention-days: 30

  test-windows:
    runs-on: windows-latest
    needs: build-linux
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Windows release package
      uses: actions/download-artifact@v4
      with:
        name: fanuc-windows-release-package
        path: windows-release/
        
    - name: Download FOCAS Monitor release
      uses: actions/download-artifact@v4
      with:
        name: focasmonitor-release-${{ github.sha }}
        path: focasmonitor-release/
        
    - name: Test FANUC example executable on Windows
      shell: cmd
      run: |
        cd windows-release
        echo Testing FANUC example executable...
        
        echo.
        echo ===== Package Contents =====
        dir
        
        echo.
        echo ===== Testing Help with --help flag =====
        fanuc_example.exe --help > help_output.txt 2>&1
        echo Exit code: %ERRORLEVEL%
        echo Help output should contain usage information:
        findstr /C:"FANUC FOCAS Library Example" help_output.txt && echo âœ… Found title
        findstr /C:"Usage:" help_output.txt && echo âœ… Found usage line
        findstr /C:"--ip=" help_output.txt && echo âœ… Found IP parameter
        findstr /C:"--info=" help_output.txt && echo âœ… Found info parameter
        findstr /C:"--verbose" help_output.txt && echo âœ… Found verbose parameter
        
        echo.
        echo ===== Testing Version Information =====
        fanuc_example.exe --version > version_output.txt 2>&1
        echo Exit code: %ERRORLEVEL%
        echo Version output should contain build information:
        findstr /C:"FANUC FOCAS Library Example" version_output.txt && echo âœ… Found title
        findstr /C:"Built:" version_output.txt && echo âœ… Found build timestamp
        findstr /C:"Commit:" version_output.txt && echo âœ… Found commit info
        
        echo.
        echo ===== Testing Valid IP Format (no connection attempt) =====
        timeout 3 fanuc_example.exe --ip=192.168.1.100 --port=8193 > valid_ip_output.txt 2>&1
        echo Timeout exit code: %ERRORLEVEL% (expected due to timeout)
        echo Valid IP should show connection attempt message:
        findstr /C:"Connecting to FANUC machine at 192.168.1.100:8193" valid_ip_output.txt && echo âœ… Found connection message
        
        echo.
        echo ===== Executable Info =====
        dir fanuc_example.exe
        echo âœ… FANUC example executable tested successfully on Windows!
        
    - name: Test FOCAS Monitor executable on Windows
      shell: cmd
      run: |
        cd focasmonitor-release
        echo Testing FOCAS Monitor executable...
        
        echo.
        echo ===== FOCAS Monitor Package Contents =====
        dir
        
        echo.
        echo ===== Testing FOCAS Monitor Help =====
        focasmonitor.exe --help > help_output.txt 2>&1
        echo Exit code: %ERRORLEVEL%
        echo Help output should contain usage information:
        findstr /C:"FOCAS Monitor" help_output.txt && echo âœ… Found title
        findstr /C:"Usage:" help_output.txt && echo âœ… Found usage line
        findstr /C:"--machines" help_output.txt && echo âœ… Found machines parameter
        findstr /C:"--output" help_output.txt && echo âœ… Found output parameter
        
        echo.
        echo ===== Testing FOCAS Monitor Version =====
        focasmonitor.exe --version > version_output.txt 2>&1
        echo Exit code: %ERRORLEVEL%
        echo Version output should contain build information:
        findstr /C:"FOCAS Monitor" version_output.txt && echo âœ… Found title
        
        echo.
        echo ===== Testing FOCAS Monitor with machines file =====
        echo Testing with sample machines file:
        type machines.txt
        timeout 5 focasmonitor.exe --machines=machines.txt --output=console > machines_test.txt 2>&1
        echo Timeout exit code: %ERRORLEVEL% (expected due to timeout)
        findstr /C:"Reading machines" machines_test.txt && echo âœ… Found machines reading
        
        echo.
        echo ===== FOCAS Monitor Executable Info =====
        dir focasmonitor.exe
        echo âœ… FOCAS Monitor executable tested successfully on Windows!

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, test-windows]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Windows release package
      uses: actions/download-artifact@v4
      with:
        name: fanuc-windows-release-package
        path: fanuc-release/
        
    - name: Download FOCAS Monitor release
      uses: actions/download-artifact@v4
      with:
        name: focasmonitor-release-${{ github.sha }}
        path: focasmonitor-release/
        
    - name: Create combined release package
      run: |
        TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
        COMMIT_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
        
        # Create combined package
        mkdir -p combined-release
        
        # Add FANUC example
        mkdir -p combined-release/fanuc-example
        cp -r fanuc-release/* combined-release/fanuc-example/
        
        # Add FOCAS Monitor
        mkdir -p combined-release/focasmonitor
        cp -r focasmonitor-release/* combined-release/focasmonitor/
        
        # Create main README
        cat > combined-release/README.md << EOF
        # FANUC FOCAS Library - Windows Release
        
        This package contains two main components:
        
        ## 1. FANUC Example (fanuc-example/)
        - Single machine monitoring example
        - Educational and testing purposes
        - Basic FOCAS library usage demonstration
        
        ## 2. FOCAS Monitor (focasmonitor/)
        - Production-ready multi-machine monitoring
        - Connection pooling and robust error handling
        - Multiple output formats (console, JSON, CSV)
        - Designed for industrial environments
        
        **Build Information:**
        - Built: ${TIMESTAMP} UTC
        - Commit: ${COMMIT_SHORT}
        - CI Build: ${{ github.run_id }}
        
        See individual README files in each directory for detailed usage instructions.
        EOF
        
        # Create ZIP package
        ZIP_NAME="fanuc-focas-complete-${TIMESTAMP}-${COMMIT_SHORT}.zip"
        zip -r "${ZIP_NAME}" combined-release/
        
        echo "RELEASE_TAG=build-${TIMESTAMP}" >> $GITHUB_ENV
        echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV
        echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
        echo "COMMIT_SHORT=${COMMIT_SHORT}" >> $GITHUB_ENV
        
    - name: Generate release notes
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
        COMMIT_DATE=$(git log -1 --pretty=format:'%ci')
        
        cat > release_notes.md << EOF
        # FANUC FOCAS Library - Complete Windows Release
        
        ## ðŸ”§ Build Information
        - **Commit**: [\`${{ env.COMMIT_SHORT }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
        - **Message**: ${COMMIT_MESSAGE}
        - **Date**: ${COMMIT_DATE}
        - **Built**: ${{ env.TIMESTAMP }} UTC
        - **Workflow**: [View build logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        ## ðŸ“¦ Package Contents
        
        ### FANUC Example (Single Machine)
        - **Executable**: fanuc_example.exe
        - **Purpose**: Educational and single machine monitoring
        - **Features**: Basic FOCAS operations, multiple info types
        
        ### FOCAS Monitor (Production Multi-Machine)
        - **Executable**: focasmonitor.exe
        - **Purpose**: Production multi-machine monitoring
        - **Features**: Connection pooling, robust error handling, multiple output formats
        
        ## ðŸš€ Quick Start
        
        ### Single Machine Monitoring
        \`\`\`cmd
        cd fanuc-example
        fanuc_example.exe --ip=192.168.1.100 --info=all
        \`\`\`
        
        ### Multi-Machine Monitoring
        \`\`\`cmd
        cd focasmonitor
        focasmonitor.exe --machines=machines.txt --output=console
        \`\`\`
        
        ## âœ¨ New Features
        - **Production-Ready**: FOCAS Monitor designed for industrial use
        - **Multi-Machine**: Monitor multiple FANUC machines simultaneously
        - **Output Formats**: Console, JSON, and CSV output options
        - **Connection Pooling**: Efficient connection management
        - **Robust Error Handling**: Comprehensive error recovery
        
        ---
        *This build was automatically generated and tested by GitHub Actions.*
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: "FANUC FOCAS Complete Release - ${{ env.TIMESTAMP }}"
        body_path: release_notes.md
        files: ${{ env.ZIP_NAME }}
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

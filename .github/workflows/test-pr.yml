name: CI/CD Pipeline

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 cmake build-essential
        
    - name: Check environment
      run: |
        cd examples/c
        chmod +x check-environment.sh build-windows.sh
        ./check-environment.sh
        
    - name: Build Windows executable
      run: |
        cd examples/c
        ./build-windows.sh
        
    - name: Verify build artifacts
      run: |
        cd examples/c
        test -f build-windows/bin/fanuc_example.exe
        echo "✅ Windows executable built successfully"
        
        # Check file is actually a Windows executable
        file build-windows/bin/fanuc_example.exe | grep -i "PE32"
        echo "✅ Confirmed Windows PE32 executable"
        
        # Check size (should be around 245KB)
        size=$(stat -c%s build-windows/bin/fanuc_example.exe)
        echo "📦 Executable size: $((size/1024))KB"
        
        # Verify release package was created
        echo "📦 Release package contents:"
        ls -la windows-release/
        
    - name: Upload Windows release package
      uses: actions/upload-artifact@v4
      with:
        name: fanuc-windows-release-package
        path: |
          examples/c/windows-release/
        retention-days: 30

  test-windows:
    runs-on: windows-latest
    needs: build-linux
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Windows release package
      uses: actions/download-artifact@v4
      with:
        name: fanuc-windows-release-package
        path: windows-release/
        
    - name: Test executable on Windows
      shell: cmd
      run: |
        cd windows-release
        echo Testing FANUC example executable...
        
        echo.
        echo ===== Package Contents =====
        dir
        
        echo.
        echo ===== Testing Help with --help flag =====
        fanuc_example.exe --help > help_output.txt 2>&1
        echo Exit code: %ERRORLEVEL%
        echo Help output should contain usage information:
        findstr /C:"FANUC FOCAS Library Example" help_output.txt && echo ✅ Found title
        findstr /C:"Usage:" help_output.txt && echo ✅ Found usage line
        findstr /C:"--ip=" help_output.txt && echo ✅ Found IP parameter
        
        echo.
        echo ===== Testing Help with no arguments =====
        fanuc_example.exe > no_args_output.txt 2>&1
        echo Exit code: %ERRORLEVEL% (should be non-zero)
        echo No-args output should contain error and help:
        findstr /C:"No FANUC machine IP address specified" no_args_output.txt && echo ✅ Found error message
        findstr /C:"Usage:" no_args_output.txt && echo ✅ Found usage in error output
        
        echo.
        echo ===== Testing Invalid Arguments =====  
        fanuc_example.exe --invalid > invalid_output.txt 2>&1
        echo Exit code: %ERRORLEVEL% (should be non-zero)
        echo Invalid args should show error
        
        echo.
        echo ===== Testing Valid IP Format (no connection attempt) =====
        echo This test validates argument parsing without network calls
        timeout 3 fanuc_example.exe --ip=192.168.1.100 --port=8193 > valid_ip_output.txt 2>&1
        echo Timeout exit code: %ERRORLEVEL% (expected due to timeout)
        echo Valid IP should show connection attempt message:
        findstr /C:"Connecting to FANUC machine at 192.168.1.100:8193" valid_ip_output.txt && echo ✅ Found connection message
        
        echo.
        echo ===== Executable Info =====
        dir fanuc_example.exe
        echo File created successfully on Windows!
        
    - name: Test error message improvements
      shell: powershell
      run: |
        cd windows-release
        Write-Host "Testing enhanced error messages..." -ForegroundColor Green
        
        Write-Host "`nPackage contents:" -ForegroundColor Yellow
        Get-ChildItem
        
        # Test no arguments - should show help
        Write-Host "`nTesting no arguments (should show help):" -ForegroundColor Yellow
        $process = Start-Process -FilePath "./fanuc_example.exe" -Wait -PassThru -NoNewWindow -RedirectStandardOutput "output_no_args.txt" -RedirectStandardError "error_no_args.txt"
        Write-Host "Exit code: $($process.ExitCode) (expected: 1 for missing IP)" -ForegroundColor Gray
        
        # Check for expected help output
        $output = ""
        if (Test-Path "output_no_args.txt") { $output += Get-Content "output_no_args.txt" -Raw }
        if (Test-Path "error_no_args.txt") { $output += Get-Content "error_no_args.txt" -Raw }
        
        Write-Host "Captured output:" -ForegroundColor Gray
        Write-Host $output -ForegroundColor Gray
        
        # Validate expected messages
        $tests = @(
            @{ Pattern = "No FANUC machine IP address specified"; Description = "Missing IP error message" },
            @{ Pattern = "FANUC FOCAS Library Example"; Description = "Program title" },
            @{ Pattern = "Usage:.*OPTIONS"; Description = "Usage line" },
            @{ Pattern = "--ip=<ip_address>.*required"; Description = "IP parameter help" },
            @{ Pattern = "--port=<port_number>.*default: 8193"; Description = "Port parameter help" },
            @{ Pattern = "--help.*Show this help message"; Description = "Help parameter" }
        )
        
        $passedTests = 0
        foreach ($test in $tests) {
            if ($output -match $test.Pattern) {
                Write-Host "✅ $($test.Description): FOUND" -ForegroundColor Green
                $passedTests++
            } else {
                Write-Host "❌ $($test.Description): MISSING" -ForegroundColor Red
            }
        }
        
        Write-Host "`nTest Results: $passedTests/$($tests.Count) passed" -ForegroundColor $(if ($passedTests -eq $tests.Count) { "Green" } else { "Yellow" })
        
        # Test --help flag specifically
        Write-Host "`nTesting --help flag:" -ForegroundColor Yellow
        $helpProcess = Start-Process -FilePath "./fanuc_example.exe" -ArgumentList "--help" -Wait -PassThru -NoNewWindow -RedirectStandardOutput "output_help.txt"
        Write-Host "Exit code: $($helpProcess.ExitCode) (expected: 0 for help)" -ForegroundColor Gray
        
        if (Test-Path "output_help.txt") {
            $helpOutput = Get-Content "output_help.txt" -Raw
            if ($helpOutput -match "FANUC FOCAS Library Example" -and $helpOutput -match "Usage:") {
                Write-Host "✅ --help flag works correctly" -ForegroundColor Green
            } else {
                Write-Host "❌ --help flag output unexpected" -ForegroundColor Red
            }
        }
        
        Write-Host "`n✅ Windows executable testing completed!" -ForegroundColor Green

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, test-windows]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Windows release package
      uses: actions/download-artifact@v4
      with:
        name: fanuc-windows-release-package
        path: release-package/
        
    - name: Create release ZIP
      run: |
        cd release-package
        TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
        COMMIT_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
        ZIP_NAME="fanuc-focas-windows-${TIMESTAMP}-${COMMIT_SHORT}.zip"
        
        # Create a comprehensive ZIP package
        zip -r "../${ZIP_NAME}" .
        
        echo "RELEASE_TAG=build-${TIMESTAMP}" >> $GITHUB_ENV
        echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV
        echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
        echo "COMMIT_SHORT=${COMMIT_SHORT}" >> $GITHUB_ENV
        
    - name: Generate release notes
      run: |
        cat > release_notes.md << EOF
        # FANUC FOCAS Windows Build - ${{ env.TIMESTAMP }}
        
        ## 📦 Complete Windows Package
        
        This release contains a **complete, ready-to-use Windows package** for the FANUC FOCAS library example.
        
        ### 🎯 What's Included
        - **fanuc_example.exe** (247KB) - Windows executable with enhanced error messages
        - **Complete FANUC FOCAS library set** (12+ MB):
          - Fwlib32.dll, Fwlib0i.dll, Fwlib0iB.dll, Fwlib150.dll, Fwlib15i.dll
          - Fwlib160.dll, Fwlib16W.dll, fwlib30i.dll, Fwlibpm.dll, Fwlibpmi.dll
          - fwlib0DN.dll, fwlib0iD.dll, fwlibe1.dll, fwlibNCG.dll
        - **liblibconfig.dll** - Configuration library
        - **README.md** - Usage instructions
        
        ### 🚀 Quick Start
        1. Download and extract the ZIP file
        2. Run: \`fanuc_example.exe --ip=YOUR_FANUC_IP --port=8193\`
        3. Or use config file: \`fanuc_example.exe --config=config.cfg\`
        
        ### ✨ Enhanced Features
        - **Enhanced error messages** for easier troubleshooting
        - **Complete DLL compatibility** for all FANUC series
        - **Cross-compiled** from Linux using MinGW-w64
        - **Fully tested** on Windows Server 2022
        
        ### 🔧 Build Info
        - **Commit**: ${{ github.sha }}
        - **Built**: ${{ env.TIMESTAMP }} UTC
        - **Workflow**: [View build logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        ---
        
        **Note**: This is an automated release created from successful CI/CD pipeline execution.
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: "FANUC FOCAS Windows Build - ${{ env.TIMESTAMP }}"
        body_path: release_notes.md
        files: ${{ env.ZIP_NAME }}
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

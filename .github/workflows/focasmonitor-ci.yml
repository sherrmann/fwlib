name: FOCAS Monitor CI/CD

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  lint-and-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('**/focasmonitor-ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format mingw-w64 cmake build-essential
        
    - name: Check C code formatting
      run: |
        echo "🎨 Checking code formatting..."
        echo "Note: Code has been automatically formatted with clang-format"
        # Verify formatting is correct (should produce no output if properly formatted)
        FORMAT_ISSUES=$(find . -name "*.c" -o -name "*.h" | grep -E "(focasmonitor|examples/c)" | head -20 | xargs clang-format --dry-run -Werror 2>&1 || true)
        if [ -n "$FORMAT_ISSUES" ]; then
          echo "⚠️ Code formatting issues found:"
          echo "$FORMAT_ISSUES"
          echo "Run 'clang-format -i' on affected files to fix formatting"
        else
          echo "✅ All code is properly formatted"
        fi

    - name: Check build environment
      run: |
        echo "🔍 Checking build environment..."
        cd examples/c
        chmod +x check-environment.sh
        ./check-environment.sh
        
        cd ../../focasmonitor
        make check

  build-and-package:
    runs-on: ubuntu-latest
    needs: lint-and-check
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('**/focasmonitor-ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-
          
    - name: Cache Git submodules
      uses: actions/cache@v4
      with:
        path: |
          examples/c/extern/googletest
          examples/c/extern/libconfig
          examples/c/extern/fff
        key: ${{ runner.os }}-submodules-${{ hashFiles('.gitmodules') }}
        restore-keys: |
          ${{ runner.os }}-submodules-
          
    - name: Cache MinGW build cache
      uses: actions/cache@v4
      with:
        path: |
          examples/c/build-windows
          examples/c/extern/libconfig/build
          focasmonitor/build-windows
        key: ${{ runner.os }}-mingw-build-${{ hashFiles('examples/c/**/*.c', 'examples/c/**/*.h', 'focasmonitor/**/*.c', 'focasmonitor/**/*.h', 'examples/c/**/CMakeLists.txt', 'focasmonitor/**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-mingw-build-
          
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 cmake build-essential zip
        
    - name: Build Legacy Examples
      run: |
        cd examples/c
        echo "🔧 Building legacy FANUC examples..."
        
        # Initialize submodules if not cached
        if [ ! -d "extern/libconfig/.git" ]; then
          echo "🔗 Initializing git submodules..."
          git submodule update --init --recursive
        else
          echo "✅ Using cached submodules"
        fi
        
        # Set build environment variables
        export BUILD_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        export BUILD_VERSION="ci-build-$(date +%Y%m%d)"
        export GITHUB_SHA="${{ github.sha }}"
        
        echo "🔧 Build Environment:"
        echo "  Timestamp: $BUILD_TIMESTAMP"
        echo "  Version: $BUILD_VERSION"
        echo "  Commit: ${GITHUB_SHA:0:7}"
        
        chmod +x build-windows.sh
        ./build-windows.sh
        
        # Verify build
        test -f build-windows/bin/fanuc_example.exe
        file build-windows/bin/fanuc_example.exe | grep "PE32"
        
        # Verify package was created by build script
        test -d windows-release
        echo "📦 Package contents:"
        ls -la windows-release/
        
        echo "✅ Legacy examples built and packaged successfully"
        
    - name: Build FOCAS Monitor
      run: |
        cd focasmonitor
        echo "🔧 Building FOCAS Monitor..."
        
        # Build FOCAS Monitor
        make all
        
        # Verify build
        test -f build-windows/focasmonitor.exe
        file build-windows/focasmonitor.exe | grep "PE32"
        
        # Get executable size
        size=$(stat -c%s build-windows/focasmonitor.exe)
        echo "📦 FOCAS Monitor executable size: $((size/1024))KB"
        
        # Verify all DLLs are included
        echo "📦 FOCAS Monitor release package ($(ls -1 release/*.dll | wc -l) DLLs):"
        ls -la release/
        
        echo "✅ FOCAS Monitor built and packaged successfully"
        
    - name: Create unified release
      run: |
        echo "📦 Creating unified release package..."
        mkdir -p unified-release
        
        # Create examples package
        cp -r examples/c/windows-release unified-release/fanuc-examples
        
        # Create focasmonitor package  
        cp -r focasmonitor/release unified-release/focasmonitor
        
        # Create release documentation
        cat > unified-release/README.md << 'EOF'
        # FANUC FOCAS Library - Complete Release Package
        
        This package contains both the legacy examples and the production FOCAS Monitor application.
        
        ## Contents
        
        ### `/fanuc-examples/` - Legacy Example Application
        - `fanuc_example.exe` - Single machine monitoring example
        - `liblibconfig.dll` - Configuration library
        - All 14 FANUC FOCAS DLLs
        - Documentation and configuration files
        
        ### `/focasmonitor/` - Production Multi-Machine Monitor
        - `focasmonitor.exe` - Production-ready multi-machine monitoring
        - All 14 FANUC FOCAS DLLs  
        - `machines.txt` - Sample machine configuration
        - `README.md` - Complete usage documentation
        
        ## FANUC Libraries Included (Both Packages)
        - Fwlib32.dll (Main FOCAS library)
        - Fwlib0i.dll, Fwlib0iB.dll (Series 0i support)
        - Fwlib150.dll, Fwlib15i.dll (Series 15 support)
        - Fwlib160.dll, Fwlib16W.dll (Series 16 support)
        - Fwlibpm.dll, Fwlibpmi.dll (Power Mate support)
        - fwlib0DN.dll, fwlib0iD.dll (Data Server support)
        - fwlib30i.dll (Series 30i support)
        - fwlibNCG.dll (NC Guide support)
        - fwlibe1.dll (Ethernet support)
        
        ## Quick Start
        
        ### Legacy Example (Single Machine)
        ```cmd
        cd fanuc-examples
        fanuc_example.exe --ip=192.168.1.100 --port=8193 --info=all
        ```
        
        ### Production Monitor (Multi-Machine)
        ```cmd
        cd focasmonitor
        focasmonitor.exe --machines=machines.txt --monitor --interval=30
        ```
        
        ## System Requirements
        - Windows 7 or later
        - Network connectivity to FANUC machines
        - FANUC machines with FOCAS support enabled
        EOF
        
        # Verify package contents
        echo "📦 Unified release package contents:"
        find unified-release -type f | sort
        
        echo "📊 Package statistics:"
        echo "  Examples DLLs: $(ls -1 unified-release/fanuc-examples/*.dll | wc -l)"
        echo "  FOCAS Monitor DLLs: $(ls -1 unified-release/focasmonitor/*.dll | wc -l)"
        echo "  Total size: $(du -sh unified-release | cut -f1)"
        
    - name: Upload Examples Package
      uses: actions/upload-artifact@v4
      with:
        name: fanuc-examples-${{ github.sha }}
        path: unified-release/fanuc-examples/
        retention-days: 30
        
    - name: Upload FOCAS Monitor Package  
      uses: actions/upload-artifact@v4
      with:
        name: focasmonitor-${{ github.sha }}
        path: unified-release/focasmonitor/
        retention-days: 30
        
    - name: Upload Unified Release Package
      uses: actions/upload-artifact@v4
      with:
        name: fanuc-focas-complete-${{ github.sha }}
        path: unified-release/
        retention-days: 90

  test-windows:
    runs-on: windows-latest
    needs: build-and-package
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download unified release
      uses: actions/download-artifact@v4
      with:
        name: fanuc-focas-complete-${{ github.sha }}
        path: release-test/
        
    - name: Test Legacy Examples on Windows
      shell: cmd
      run: |
        cd release-test\fanuc-examples
        echo Testing legacy FANUC examples...
        
        echo.
        echo ===== Examples Package Contents =====
        dir
        
        echo.
        echo ===== Testing Examples Help =====
        fanuc_example.exe --help > help_output.txt 2>&1
        echo Exit code: %ERRORLEVEL%
        findstr /C:"FANUC FOCAS Library Example" help_output.txt && echo ✅ Found title
        findstr /C:"Usage:" help_output.txt && echo ✅ Found usage line
        findstr /C:"--ip=" help_output.txt && echo ✅ Found IP parameter
        
        echo.
        echo ===== Testing Examples Version =====
        fanuc_example.exe --version > version_output.txt 2>&1
        echo Exit code: %ERRORLEVEL%
        findstr /C:"FANUC FOCAS Library Example" version_output.txt && echo ✅ Found title
        findstr /C:"Built:" version_output.txt && echo ✅ Found build timestamp
        
        echo ✅ Legacy examples tested successfully!
        
    - name: Test FOCAS Monitor on Windows
      shell: cmd
      run: |
        cd release-test\focasmonitor
        echo Testing FOCAS Monitor...
        
        echo.
        echo ===== FOCAS Monitor Package Contents =====
        dir
        
        echo.
        echo ===== Testing FOCAS Monitor Help =====
        focasmonitor.exe --help > help_output.txt 2>&1
        echo Exit code: %ERRORLEVEL%
        findstr /C:"FOCAS Monitor" help_output.txt && echo ✅ Found title
        findstr /C:"Usage:" help_output.txt && echo ✅ Found usage line
        findstr /C:"--machines" help_output.txt && echo ✅ Found machines parameter
        findstr /C:"--output" help_output.txt && echo ✅ Found output parameter
        
        echo.
        echo ===== Testing FOCAS Monitor Version =====
        focasmonitor.exe --version > version_output.txt 2>&1
        echo Exit code: %ERRORLEVEL%
        findstr /C:"FOCAS Monitor" version_output.txt && echo ✅ Found title
        
        echo.
        echo ===== Testing with Sample Configuration =====
        echo Sample machines configuration:
        type machines.txt
        
        echo.
        echo Testing configuration validation (should show connection attempts):
        timeout 5 focasmonitor.exe --machines=machines.txt --info=basic > test_output.txt 2>&1 || echo Timeout completed
        set TIMEOUT_EXIT=%ERRORLEVEL%
        echo Timeout exit code: %TIMEOUT_EXIT% (expected due to timeout)
        
        REM Check if we got expected output (ignore timeout exit code)
        findstr /C:"Loading machines from" test_output.txt && echo ✅ Configuration loaded || echo ⚠️ Config validation test (expected in CI)
        
        REM Reset error level to success since timeout is expected
        exit /b 0
        
    - name: Verify DLL Coverage
      shell: cmd
      run: |
        echo.
        echo ===== Verifying Complete DLL Coverage =====
        
        echo Examples DLL count:
        dir /b release-test\fanuc-examples\*.dll | find /c /v ""
        
        echo FOCAS Monitor DLL count:
        dir /b release-test\focasmonitor\*.dll | find /c /v ""
        
        echo.
        echo ===== Expected FANUC DLLs (should be present in both) =====
        echo Checking for critical FANUC libraries...
        dir release-test\focasmonitor\Fwlib32.dll && echo ✅ Main FOCAS library present
        dir release-test\focasmonitor\fwlib30i.dll && echo ✅ Series 30i support present  
        dir release-test\focasmonitor\Fwlib160.dll && echo ✅ Series 16 support present
        dir release-test\focasmonitor\fwlibNCG.dll && echo ✅ NC Guide support present
        
        echo ✅ DLL coverage verification completed!

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-package, test-windows]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('**/focasmonitor-ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-
          
    - name: Cache Git submodules
      uses: actions/cache@v4
      with:
        path: |
          examples/c/extern/googletest
          examples/c/extern/libconfig
          examples/c/extern/fff
        key: ${{ runner.os }}-submodules-${{ hashFiles('.gitmodules') }}
        restore-keys: |
          ${{ runner.os }}-submodules-
          
    - name: Cache MinGW build cache
      uses: actions/cache@v4
      with:
        path: |
          examples/c/build-windows
          examples/c/extern/libconfig/build
          focasmonitor/build-windows
        key: ${{ runner.os }}-mingw-build-${{ hashFiles('examples/c/**/*.c', 'examples/c/**/*.h', 'focasmonitor/**/*.c', 'focasmonitor/**/*.h', 'examples/c/**/CMakeLists.txt', 'focasmonitor/**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-mingw-build-
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 cmake zip
        
    - name: Build release packages
      run: |
        echo "🚀 Creating release packages..."
        
        # Initialize submodules if not cached
        if [ ! -d "examples/c/extern/libconfig/.git" ]; then
          echo "🔗 Initializing git submodules..."
          git submodule update --init --recursive
        else
          echo "✅ Using cached submodules"
        fi
        
        # Generate release version from timestamp and commit
        export RELEASE_VERSION="build-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}"
        echo "📦 Release version: $RELEASE_VERSION"
        
        # Build examples
        cd examples/c
        chmod +x build-windows.sh
        ./build-windows.sh
        cd ../..
        
        # Build focasmonitor
        cd focasmonitor
        make all
        cd ..
        
        # Create release structure
        mkdir -p official-release
        cp -r examples/c/windows-release official-release/fanuc-examples-$RELEASE_VERSION
        cp -r focasmonitor/release official-release/focasmonitor-$RELEASE_VERSION
        
        # Create individual archives
        cd official-release
        zip -r fanuc-examples-$RELEASE_VERSION.zip fanuc-examples-$RELEASE_VERSION/
        zip -r focasmonitor-$RELEASE_VERSION.zip focasmonitor-$RELEASE_VERSION/
        
        # Create unified archive
        mkdir fanuc-focas-complete-$RELEASE_VERSION
        cp -r fanuc-examples-$RELEASE_VERSION fanuc-focas-complete-$RELEASE_VERSION/fanuc-examples
        cp -r focasmonitor-$RELEASE_VERSION fanuc-focas-complete-$RELEASE_VERSION/focasmonitor
        
        # Add release documentation
        cat > fanuc-focas-complete-$RELEASE_VERSION/README.md << EOF
        # FANUC FOCAS Library - Release $RELEASE_VERSION
        
        Release package containing both legacy examples and production FOCAS Monitor.
        
        ## Build Information
        - **Build**: $RELEASE_VERSION
        - **Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        - **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## Package Contents
        - \`/fanuc-examples/\` - Legacy single-machine example
        - \`/focasmonitor/\` - Production multi-machine monitor
        - Complete FANUC library support for all machine series (14 DLLs)
        
        ## System Requirements  
        - Windows 7 or later (32-bit or 64-bit)
        - Network connectivity to FANUC CNC machines
        - FANUC machines with FOCAS support enabled
        
        ## Quick Start
        See individual README files in each directory for detailed usage instructions.
        EOF
        
        zip -r fanuc-focas-complete-$RELEASE_VERSION.zip fanuc-focas-complete-$RELEASE_VERSION/
        
        echo "📦 Release packages created:"
        ls -la *.zip
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-${{ github.sha }}
        path: |
          official-release/*.zip
        retention-days: 90

  github-release:
    runs-on: ubuntu-latest
    needs: [build-and-package, test-windows]
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('**/focasmonitor-ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-
          
    - name: Cache Git submodules
      uses: actions/cache@v4
      with:
        path: |
          examples/c/extern/googletest
          examples/c/extern/libconfig
          examples/c/extern/fff
        key: ${{ runner.os }}-submodules-${{ hashFiles('.gitmodules') }}
        restore-keys: |
          ${{ runner.os }}-submodules-
          
    - name: Cache MinGW build cache
      uses: actions/cache@v4
      with:
        path: |
          examples/c/build-windows
          examples/c/extern/libconfig/build
          focasmonitor/build-windows
        key: ${{ runner.os }}-mingw-build-${{ hashFiles('examples/c/**/*.c', 'examples/c/**/*.h', 'focasmonitor/**/*.c', 'focasmonitor/**/*.h', 'examples/c/**/CMakeLists.txt', 'focasmonitor/**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-mingw-build-
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 cmake zip
        
    - name: Build release packages
      run: |
        echo "🚀 Creating GitHub release packages..."
        
        # Initialize submodules if not cached
        if [ ! -d "examples/c/extern/libconfig/.git" ]; then
          echo "🔗 Initializing git submodules..."
          git submodule update --init --recursive
        else
          echo "✅ Using cached submodules"
        fi
        
        # Generate release version
        export RELEASE_VERSION="v$(date +%Y.%m.%d-%H%M%S)-${GITHUB_SHA:0:7}"
        
        # Create a descriptive release name based on trigger type
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          export RELEASE_NAME="FANUC FOCAS PR #${{ github.event.number }} - $(date +%Y-%m-%d)"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          export RELEASE_NAME="FANUC FOCAS Manual Build - $(date +%Y-%m-%d)"
        else
          export RELEASE_NAME="FANUC FOCAS Build - $(date +%Y-%m-%d)"
        fi
        
        export IS_PRERELEASE="false"
        
        echo "📦 Release information:"
        echo "  Version: $RELEASE_VERSION"
        echo "  Name: $RELEASE_NAME"
        echo "  Prerelease: $IS_PRERELEASE"
        echo "  Trigger: ${{ github.event_name }}"
        echo "  Branch: ${{ github.ref_name }}"
        
        # Build examples
        cd examples/c
        chmod +x build-windows.sh
        ./build-windows.sh
        cd ../..
        
        # Build focasmonitor
        cd focasmonitor
        make all
        cd ..
        
        # Create release structure
        mkdir -p github-release
        cp -r examples/c/windows-release github-release/fanuc-examples-$RELEASE_VERSION
        cp -r focasmonitor/release github-release/focasmonitor-$RELEASE_VERSION
        
        # Create individual archives
        cd github-release
        zip -r fanuc-examples-$RELEASE_VERSION.zip fanuc-examples-$RELEASE_VERSION/
        zip -r focasmonitor-$RELEASE_VERSION.zip focasmonitor-$RELEASE_VERSION/
        
        # Create unified archive
        mkdir fanuc-focas-complete-$RELEASE_VERSION
        cp -r fanuc-examples-$RELEASE_VERSION fanuc-focas-complete-$RELEASE_VERSION/fanuc-examples
        cp -r focasmonitor-$RELEASE_VERSION fanuc-focas-complete-$RELEASE_VERSION/focasmonitor
        
        # Add release documentation
        cat > fanuc-focas-complete-$RELEASE_VERSION/README.md << EOF
        # FANUC FOCAS Library - Release $RELEASE_VERSION
        
        Complete release package containing both legacy examples and production FOCAS Monitor.
        
        ## Build Information
        - **Release**: $RELEASE_VERSION
        - **Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        - **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## Package Contents
        - \`/fanuc-examples/\` - Legacy single-machine monitoring example
        - \`/focasmonitor/\` - Production multi-machine monitoring application
        - Complete FANUC library support for all machine series (14 DLLs each)
        
        ## System Requirements  
        - Windows 7 or later (32-bit or 64-bit)
        - Network connectivity to FANUC CNC machines
        - FANUC machines with FOCAS support enabled
        
        ## Quick Start
        
        ### Legacy Example (Single Machine)
        \`\`\`cmd
        cd fanuc-examples
        fanuc_example.exe --ip=192.168.1.100 --port=8193 --info=all
        \`\`\`
        
        ### Production Monitor (Multi-Machine)
        \`\`\`cmd
        cd focasmonitor
        focasmonitor.exe --machines=machines.txt --monitor --interval=30
        \`\`\`
        
        See individual README files in each directory for complete documentation.
        EOF
        
        zip -r fanuc-focas-complete-$RELEASE_VERSION.zip fanuc-focas-complete-$RELEASE_VERSION/
        
        echo "📦 GitHub release packages created:"
        ls -la *.zip
        
        # Set environment variables for release step
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
        echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_ENV
        
    - name: Generate release notes
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        ## FANUC FOCAS Library Release
        
        This release contains both the legacy examples and the production FOCAS Monitor application for FANUC CNC machine monitoring.
        
        **🚀 Automatically built and released on every push, pull request, and manual trigger!**
        
        ### 📦 What's Included
        
        **Three download options:**
        1. **`fanuc-focas-complete-*.zip`** - Complete package with both applications
        2. **`focasmonitor-*.zip`** - Production multi-machine monitor only  
        3. **`fanuc-examples-*.zip`** - Legacy single-machine example only
        
        ### 🎯 Quick Start
        
        **Production Multi-Machine Monitoring:**
        ```cmd
        # Download and extract focasmonitor-*.zip or complete package
        cd focasmonitor
        focasmonitor.exe --machines=machines.txt --monitor --interval=30
        ```
        
        **Legacy Single-Machine Example:**
        ```cmd  
        # Download and extract fanuc-examples-*.zip or complete package
        cd fanuc-examples
        fanuc_example.exe --ip=192.168.1.100 --port=8193 --info=all
        ```
        
        ### 🔧 System Requirements
        - Windows 7 or later (32-bit or 64-bit)
        - Network connectivity to FANUC CNC machines
        - FANUC machines with FOCAS support enabled
        
        ### 📚 Documentation
        Complete usage documentation is included in each package's README.md file.
        
        ### 🛠️ Build Information
        - **Version:** ${{ env.RELEASE_VERSION }}
        - **Commit:** ${{ github.sha }}
        - **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **Triggered by:** ${{ github.event_name }} on ${{ github.ref_name }}
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        name: ${{ env.RELEASE_NAME }}
        body_path: RELEASE_NOTES.md
        files: |
          github-release/fanuc-focas-complete-${{ env.RELEASE_VERSION }}.zip
          github-release/focasmonitor-${{ env.RELEASE_VERSION }}.zip
          github-release/fanuc-examples-${{ env.RELEASE_VERSION }}.zip
        prerelease: ${{ env.IS_PRERELEASE }}
        make_latest: true

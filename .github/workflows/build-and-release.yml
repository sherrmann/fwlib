name: Build and Release FANUC FOCAS

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build-windows:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install MinGW cross-compiler
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 cmake build-essential
        
    - name: Verify build environment
      run: |
        cd examples/c
        ./check-environment.sh
        
    - name: Build Windows executable
      run: |
        cd examples/c
        ./build-windows.sh
        
    - name: Verify build artifacts
      run: |
        cd examples/c
        ls -la build-windows/bin/
        file build-windows/bin/fanuc_example.exe
        
    - name: Create comprehensive release package
      run: |
        cd examples/c
        mkdir -p windows-release-comprehensive
        cp build-windows/bin/fanuc_example.exe windows-release-comprehensive/
        cp build-windows/bin/*.dll windows-release-comprehensive/
        cp /workspaces/fwlib/*wlib*.dll windows-release-comprehensive/ 2>/dev/null || cp ../../*wlib*.dll windows-release-comprehensive/ 2>/dev/null || true
        cp test/test_config.cfg windows-release-comprehensive/config.cfg 2>/dev/null || echo "ip = \"192.168.1.100\"\nport = 8193" > windows-release-comprehensive/config.cfg
        
        # Create README for the package
        cat > windows-release-comprehensive/README.md << 'EOF'
        # FANUC FOCAS Windows Executable
        
        ## Quick Start
        ```cmd
        fanuc_example.exe --ip=192.168.1.100 --port=8193
        ```
        
        ## Enhanced Error Messages
        This version provides helpful error descriptions:
        - Error -15: DLL not exist error → Run from this directory  
        - Error -16: Windows socket error → Check network/IP
        - Error -17: Protocol error → Check CNC settings
        
        ## Files Included
        - fanuc_example.exe - Main executable
        - *.dll - FANUC FOCAS libraries
        - config.cfg - Sample configuration
        
        For full documentation, see: https://github.com/sherrmann/fwlib
        EOF
        
    - name: Create ZIP package
      run: |
        cd examples/c
        zip -r fanuc-windows-example-${{ github.sha }}.zip windows-release-comprehensive/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fanuc-windows-executable
        path: examples/c/fanuc-windows-example-${{ github.sha }}.zip
        retention-days: 30

  test-build:
    runs-on: ubuntu-latest
    needs: build-windows
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: fanuc-windows-executable
        path: ./artifacts
        
    - name: Verify package contents
      run: |
        cd artifacts
        unzip -l fanuc-windows-example-*.zip
        unzip fanuc-windows-example-*.zip
        
        # Check if executable exists
        test -f windows-release-comprehensive/fanuc_example.exe
        echo "✅ Executable found"
        
        # Check if DLLs exist
        dll_count=$(find windows-release-comprehensive -name "*.dll" | wc -l)
        echo "📦 Found $dll_count DLL files"
        test $dll_count -gt 0
        echo "✅ DLLs found"
        
        # Check if config exists
        test -f windows-release-comprehensive/config.cfg
        echo "✅ Config file found"
        
        # Check if README exists
        test -f windows-release-comprehensive/README.md
        echo "✅ README found"
        
        echo "🎉 All package contents verified!"

  build-status:
    runs-on: ubuntu-latest
    needs: [build-windows, test-build]
    if: always()
    
    steps:
    - name: Report build status
      run: |
        if [[ "${{ needs.build-windows.result }}" == "success" && "${{ needs.test-build.result }}" == "success" ]]; then
          echo "🎉 Build and tests passed successfully!"
          echo "✅ Windows executable built"
          echo "✅ Package verification completed"
          echo "� Artifacts available for download"
        else
          echo "❌ Build or tests failed"
          echo "Build result: ${{ needs.build-windows.result }}"
          echo "Test result: ${{ needs.test-build.result }}"
          exit 1
        fi
